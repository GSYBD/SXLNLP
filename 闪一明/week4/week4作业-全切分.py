#week3作业

#词典；每个词后方存储的是其词频，词频仅为示例，不会用到，也可自行修改
Dict = {"经常":0.1,
        "经":0.05,
        "有":0.1,
        "常":0.001,
        "有意见":0.1,
        "歧":0.001,
        "意见":0.2,
        "分歧":0.2,
        "见":0.05,
        "意":0.05,
        "见分歧":0.05,
        "分":0.1}

#待切分文本
sentence = "经常有意见分歧"

#实现全切分函数，输出根据字典能够切分出的所有的切分方式
def all_cut(sentence, Dict):
    #TODO
    def backtrack(start): # 定义一个内部函数 backtrack，用于递归生成所有可能的切分组合
        if start == len(sentence):  # 如果 start 等于 sentence 的长度，说明已经处理完整个句子
            results.append(list(current)) # 将当前的切分组合（current）复制一份并添加到结果列表（results）中
            return
        for end in range(start + 1, len(sentence) + 1):  # 从 start 位置开始，尝试所有可能的切分位置
            word = sentence[start:end] # 获取当前尝试的词（从 start 到 end）
            if word in Dict: # 如果这个词在词典中
                current.append(word) # 将这个词添加到当前的切分组合（current）中
                backtrack(end)  # 递归调用 backtrack，处理下一个词的起始位置（end）
                current.pop()  # 回溯，移除刚刚添加的词，以便尝试其他可能的切分组合
    results = [] # 初始化结果列表，用于存储所有可能的切分组合
    current = []  # 初始化当前的切分组合，用于在递归过程中存储临时的切分结果
    backtrack(0)  # 从句子的起始位置（0）开始调用 backtrack 函数
    return results # 返回所有可能的切分组合
target = all_cut(sentence, Dict)
for t in target:
    print(t)

#目标输出;顺序不重要
target1 = [
    ['经常', '有意见', '分歧'],
    ['经常', '有意见', '分', '歧'],
    ['经常', '有', '意见', '分歧'],
    ['经常', '有', '意见', '分', '歧'],
    ['经常', '有', '意', '见分歧'],
    ['经常', '有', '意', '见', '分歧'],
    ['经常', '有', '意', '见', '分', '歧'],
    ['经', '常', '有意见', '分歧'],
    ['经', '常', '有意见', '分', '歧'],
    ['经', '常', '有', '意见', '分歧'],
    ['经', '常', '有', '意见', '分', '歧'],
    ['经', '常', '有', '意', '见分歧'],
    ['经', '常', '有', '意', '见', '分歧'],
    ['经', '常', '有', '意', '见', '分', '歧']
]

