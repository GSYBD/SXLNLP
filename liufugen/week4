# week3作业
import copy

# 词典；每个词后方存储的是其词频，词频仅为示例，不会用到，也可自行修改
Dict = {"经常": 0.1,
        "经": 0.05,
        "有": 0.1,
        "常": 0.001,
        "有意见": 0.1,
        "意见": 0.2,
        "分歧": 0.2,
        "见": 0.05,
        "意": 0.05,
        "见分歧": 0.05,
        "分": 0.1}

# 构建前缀词典
def build_prefix_dict(Dict):
    prefix_dict = {}
    for word in Dict.keys():
        # 当前词如果已经前缀词典中跳过。
        if word in prefix_dict:
            continue
        # 当前词如果不在词典中，则将当前词加入前缀词典，并将当前词的前缀加入前缀词典
        prefix_dict[word] = 1
        for i in range(1, len(word) + 1):
            # 如果当前词的前缀在词典中，则将当前词的前缀加入前缀词典
            if word[:i] in prefix_dict:
                continue
            # 如果当前词的前缀在词典中，则将当前词的前缀当做一个词加入前缀词典
            if word[:i] in Dict:
                prefix_dict[word[:i]] = 1
            else:
                prefix_dict[word[:i]] = 0

    return prefix_dict


class SentenceMap:
    def __init__(self, sentence, allCut=[]):
        self.sentence = sentence
        self.allCut = allCut


# 实现基于前缀词典的动态规划算法，输出最优的切分方式
# 实现全切分函数，输出根据字典能够切分出的所有的切分方式
def all_cut_dynamic(sentence, prefix_dict):
    sen = [SentenceMap(sentence)]
    left, right = 0, 1
    target = []
    while left &lt; right:
        str = sen[left].sentence
        all_cut = sen[left].allCut
        left += 1
        # 当字符为空时，将当前切分方式加入结果:
        if str == '':
            target.append(all_cut)
            continue
        for i in range(1, min(len(str) + 1, maxLen + 1)):
            word = str[:i]
            # 当该字符在前缀字典中时
            if word in prefix_dict:
                if prefix_dict[word] == 1:
                    new_all_cut = copy.deepcopy(all_cut)
                    new_all_cut.append(word)
                    sen.append(SentenceMap(str[i:], new_all_cut))
                    right += 1
                else:
                    # 如果该资费在前缀字典中，不是分词字符就是前缀字符，直接跳过
                    # prefix_dict[word] == 0:
                    continue
            # 当前字符不在前缀字典中，且长度为 1 时。当做最小字符处理。
            elif len(word) == 1:
                new_all_cut = copy.deepcopy(all_cut)
                new_all_cut.append(word)
                sen.append(SentenceMap(str[i:], new_all_cut))
                right += 1
                break
    return target


# 通过递归实现全切分函数，输出根据字典能够切分出的所有的切分方式
def all_cut_deep(sentence, prefix_dict):
    if len(sentence) == 0:
        return [[]]
    if len(sentence) &lt;= 1:
        return [[sentence]]
    target = []
    for i in range(1, min(len(sentence) + 1, maxLen + 1)):
        word = sentence[:i]
        if word in prefix_dict and prefix_dict[word] == 1:
            results = all_cut_deep(sentence[i:], prefix_dict)
            for result in results:
                result.insert(0, word)
            target.extend(results)
        elif word in prefix_dict and prefix_dict[word] == 0:
            continue

    return target


# 目标输出;顺序不重要
target = [
    ['经常', '有意见', '分歧'],
    ['经常', '有意见', '分', '歧'],
    ['经常', '有', '意见', '分歧'],
    ['经常', '有', '意见', '分', '歧'],
    ['经常', '有', '意', '见分歧'],
    ['经常', '有', '意', '见', '分歧'],
    ['经常', '有', '意', '见', '分', '歧'],
    ['经', '常', '有意见', '分歧'],
    ['经', '常', '有意见', '分', '歧'],
    ['经', '常', '有', '意见', '分歧'],
    ['经', '常', '有', '意见', '分', '歧'],
    ['经', '常', '有', '意', '见分歧'],
    ['经', '常', '有', '意', '见', '分歧'],
    ['经', '常', '有', '意', '见', '分', '歧']
]


if __name__ == '__main__':
    # 待切分文本
    sentence = "经常有意见分歧"
    build_prefix_dict(Dict)
    maxLen = max(len(word) for word in Dict.keys())

    target = all_cut_dynamic(sentence, prefix_dict=build_prefix_dict(Dict))
    for i in range(len(target)):
        print(target[i])

    # 递归方式
    # target = all_cut_deep(sentence, build_prefix_dict(Dict))
    # for i in range(len(target)):
    #     print(target[i])
