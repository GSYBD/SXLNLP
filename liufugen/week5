#!/usr/bin/env python3
#coding: utf-8

#基于训练好的词向量模型进行聚类
#聚类采用Kmeans算法
import math
import jieba
import numpy as np
from gensim.models import Word2Vec
from sklearn.cluster import KMeans
from collections import defaultdict

#输入模型文件路径
#加载训练好的模型
def load_word2vec_model(path):
    model = Word2Vec.load(path)
    return model

def load_sentence(path):
    sentences = set()
    with open(path, encoding="utf8") as f:
        for line in f:
            sentence = line.strip()
            sentences.add(" ".join(jieba.cut(sentence)))
    print("获取句子数量：", len(sentences))
    return sentences

#将文本向量化
def sentences_to_vectors(sentences, model):
    vectors = []
    for sentence in sentences:
        words = sentence.split()  #sentence是分好词的，空格分开
        vector = np.zeros(model.vector_size)
        #所有词的向量相加求平均，作为句子向量
        for word in words:
            try:
                vector += model.wv[word]
            except KeyError:
                #部分词在训练中未出现，用全0向量代替
                vector += np.zeros(model.vector_size)
        vectors.append(vector / len(words))
    return np.array(vectors)


def calculate_cosine_similarity(vec1, vec2):
    """
    vec1: 中心点向量
    vec2: 当前类别中的一组向量
    """
    """计算中心点到其余点的平均余弦距离"""
    if np.linalg.norm(vec1) == 0 or np.linalg.norm(vec2) == 0:
        return 0
    cos_sim = 0
    for vec in vec2:
        cos_sim += 1 - np.dot(vec1, vec) / (np.linalg.norm(vec1) * np.linalg.norm(vec))

    return cos_sim / len(vec2)

def exclude_bad_cos_sim(vectors,sentence_label_index_dict,centers):
    """
    排除余弦距离太长的，并将剩余值按照余弦距离排序
    """
    avg_con_sims = {}
    for label, indexs in sentence_label_index_dict.items():
        vecs = vectors[indexs]
        avg_cos_sim = calculate_cosine_similarity(centers[label], vecs)
        print("cluster %s 的cos_sim: " % label, avg_cos_sim)
            #排除cos_sim太低的
        avg_con_sims[label] = avg_cos_sim

    # 将其中 余弦距离小于 0.1 的进行保存并进行升序排序
    avg_con_sims = {k: v for k, v in avg_con_sims.items() if v < 0.1}
    recos = sorted(avg_con_sims.items() , key=lambda x: x[1])
    return recos



def main():
    model = load_word2vec_model(r"./model.w2v") #加载词向量模型
    sentences = load_sentence("titles.txt")  #加载所有标题
    vectors = sentences_to_vectors(sentences, model)   #将所有标题向量化

    n_clusters = int(math.sqrt(len(sentences)))  #指定聚类数量
    print("指定聚类数量：", n_clusters)
    kmeans = KMeans(n_clusters)  #定义一个kmeans计算类
    kmeans.fit(vectors)          #进行聚类计算

    sentence_label_dict = defaultdict(list)
    sentence_label_index_dict = defaultdict(list)
    sentence_labels = kmeans.labels_

    sentences_list = list(sentences)
    for index in range(len(sentence_labels)):  #取出句子和标签
        sentence_label_dict[sentence_labels[index]].append(sentences_list[index])         #同标签的放到一起
        sentence_label_index_dict[sentence_labels[index]].append(index)

    
    avg_cos = exclude_bad_cos_sim(vectors,sentence_label_index_dict,kmeans.cluster_centers_)
    for label, indexs in avg_cos:
        print("cluster %s :" % label)
        sentences = sentence_label_dict[label]
        for i in range(min(10, len(sentences))): 
            print(sentences[i].replace(" ", ""))
        print("---------")


if __name__ == "__main__":
    main()

