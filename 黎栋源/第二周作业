# coding:utf-8

import torch
import torch.nn as nn
import numpy as np
import random
import json
import matplotlib.pyplot as plt

"""
基于pytorch框架编写模型训练
实现一个自行构造的找规律（机器学习）任务
规律：x是一个3维向量，每一维范围是1~6，如果这3个数是顺子，则为1；如果有两个数相等，则为2；如果有3个数相等则为3；否则为0。
"""

# 定义模型结构
class TorchModel(nn.Module):
    def __init__(self, input_size):
        super(TorchModel, self).__init__()
        self.linear1 = nn.Linear(input_size, 6)
        self.linear2 = nn.Linear(6, 4)
        # self.activation = nn.Softmax()
        # self.loss = nn.CrossEntropyLoss()
        self.loss = nn.functional.cross_entropy

    def forward(self, x, y=None):
        x = self.linear1(x)  # (batch_size,input_size) -> (batch_size,6)
        y_pred = self.linear2(x)  # (batch_size,6) -> (batch_size,4)
        # y_pred = self.activation(x)  # (batch_size,4)
        if y is not None:
            return self.loss(y_pred, y)  # 预测值和真实值计算损失
        else:
            return y_pred  # 预测值


# 生成一个样本，样本的生成方法，代表了我们要学习的规律
# 随机生成一个3维向量，每一维范围是1~6，如果这3个数是顺子，则为1；如果有两个数相等，则为2；如果有3个数相等则为3；否则为0。
def build_sample():
    x = np.random.randint(1, 7, size=3)
    if x[0] == x[1] == x[2]:
        return x, 3
    elif x[0] == x[1] or x[1] == x[2] or x[0] == x[2]:
        return x, 2
    elif sorted(x) == [x[0], x[0] + 1, x[0] + 2]:
        return x, 1
    else:
        return x, 0

# 随机生成一批样本
def build_dataset(total_sample_num):
    X = []
    Y = []
    for i in range(total_sample_num):
        x, y = build_sample()
        X.append(x)
        Y.append(y)
    return torch.FloatTensor(X), torch.LongTensor(Y)

# 测试代码
# 用来测试每轮模型的准确率
def evaluate(model):
    model.eval()
    total_sample_num = 100
    x, y = build_dataset(total_sample_num)
    print("本次预测集中共有%d个类别1样本，%d个类别2样本，%d个类别3样本，%d个其他样本" % (sum(y == 1), sum(y == 2), sum(y == 3), sum(y == 0)))
    correct, wrong = 0, 0
    with torch.no_grad():
        y_pred = model(x)  # 预测值
        # y_pred_labels = torch.argmax(y_pred, dim=1)
        for y_p, y_t in zip(y_pred, y):  # 与真实标签进行对比
            # if int(y_p) == int(y_t):
            if torch.argmax(y_p) == int(y_t):
                correct += 1  # 预测正确
            else:
                wrong += 1
    print("正确预测个数： %d，正确率： %.2f" % (correct, correct / (correct + wrong)))
    return correct / (correct + wrong)

def main():
    # 配置参数
    epoch_num = 20  # 训练轮数
    batch_size = 20  # 批次大小
    train_sample = 5000  # 每轮训练总共训练的样本总数
    input_size = 3  # 输入向量的维度
    learning_rate = 0.01  # 学习率
    # 构建模型
    model = TorchModel(input_size)
    # 定义优化器
    optim = torch.optim.Adam(model.parameters(), lr=learning_rate)
    log = []
    # 创建训练集，正常任务是读取训练集
    train_x, train_y = build_dataset(train_sample)
    # 训练模型
    for epoch in range(epoch_num):
        model.train()  # 开启训练模式
        watch_loss = []
        for batch_index in range(train_sample // batch_size):
            x = train_x[batch_index * batch_size: (batch_index + 1) * batch_size]
            y = train_y[batch_index * batch_size: (batch_index + 1) * batch_size]
            loss = model(x, y)  # 计算损失
            loss.backward()  # 计算梯度
            optim.step()  # 更新权重
            optim.zero_grad()  # 清空梯度
            watch_loss.append(loss.item())  # 记录损失
        print("==========\n第%d轮平均loss：%f" % (epoch + 1, np.mean(watch_loss)))
        acc = evaluate(model)  # 评估模型
        log.append([acc, float(np.mean(watch_loss))])
    # 保存模型
    torch.save(model.state_dict(), "model.pt")
    # 绘制训练过程曲线
    print(log)
    plt.plot(range(len(log)), [i[0] for i in log], label="acc")  # 画acc曲线
    plt.plot(range(len(log)), [i[1] for i in log], label="loss")  # 画loss曲线
    plt.legend()
    plt.show()
    return

# 使用训练好的模型做预测
def predict(model_path, input_vec):
    input_size = 3
    model = TorchModel(input_size)
    model.load_state_dict(torch.load(model_path))  # 加载模型权重
    print(model.state_dict())

    model.eval()  # 开启测试模式
    with torch.no_grad():  #不计算梯度
        result = model.forward(torch.FloatTensor(input_vec))  # 预测结果
    result = torch.argmax(result, dim=1)
    for vec, res in zip(input_vec, result):
        print("输入：%s，预测类别：%d" % (vec, res))  # 输出预测结果

if __name__ == '__main__':
    main()
    test_vec = [[1, 2, 3],
                [2, 2, 3],
                [4, 4, 4],
                [5, 6, 5],
                [6, 1, 2]]
    predict("model.pt", test_vec)
